import Head from 'next/head'
import React, { useState } from "react"
import { gql, useQuery, useMutation } from "@apollo/client"
import { TextField, Button } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import Typography from '@material-ui/core/Typography';
import Accordion from '@material-ui/core/Accordion';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import Divider from '@material-ui/core/Divider';

// This query is executed at run time by Apollo.
const GET_ARTICLES = gql`
  {
    articles(time: 0) {
      id
      digest
    }
    time
  }
`

const POST_ARTICLE = gql`
  mutation postArticle($userId: String!, $digest: String!) {
    postArticle(userId: $userId, digest: $digest) {
      id
    }
  }
`

const useStyles = makeStyles({
  root: {
    margin: '4px auto',
    minWidth: 275,
  },
  pos: {
    marginBottom: 12,
  },
});

export default function Home() {
  // Query
  const { loading, error, data: runtimeData, refetch } = useQuery(GET_ARTICLES)

  // Mutation
  const [postArticle] = useMutation(POST_ARTICLE)

  // Make timeline
  const classes = useStyles()
  const timeline = (
    <>
      {runtimeData && runtimeData.articles.map((e: any) => (
        <Card className={classes.root} key={e.id}>
          <CardContent>
            <Typography className={classes.pos} color="textSecondary">
              {e.id}
            </Typography>
            <Typography variant="body2" component="p">
              {e.digest}
            </Typography>
          </CardContent>
        </Card>
      ))}
    </>
  )

  // Make raw data viewer
  const rawDataView = (data: string) => (
    <Accordion>
      <AccordionSummary
        expandIcon={<ExpandMoreIcon />}
      >
        <Typography>Raw data</Typography>
      </AccordionSummary>
      <AccordionDetails>
        <pre>{JSON.stringify(data, null, 2)}</pre>
      </AccordionDetails>
    </Accordion>
  )

  let input: { value: string; }

  return (
    <div>
      <Head>
        <title>Web-app Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <form
          onSubmit={e => {
            e.preventDefault()
            postArticle({ variables: { userId: "user0", digest: input.value } })
              .then((result) => {
                console.log("postArticle:", result)
                refetch()
              })
            input.value = ""
          }}
        >
          <TextField
            inputRef={node => {
              input = node
            }}
            variant="outlined"
            fullWidth
            multiline
          />
          <Button
            variant="contained"
            color="primary"
            type="submit"
            fullWidth
          >
            submit
          </Button>
        </form>

        <Divider />

        {timeline}

        {rawDataView(runtimeData)}
        <Typography>
          {loading && <span>Loading...</span>}
          {error && <span style={{ color: "red" }}>Error: ${error.message}</span>}
          {runtimeData &&
            parseInt(runtimeData.time) &&
            new Date(parseInt(runtimeData.time)).toISOString()}
        </Typography>
      </main>
    </div>
  );
};
